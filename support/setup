#!/bin/bash

# ----------------------------------------------------------------------------------------
# GENERAL INFORMATION
# ----------------------------------------------------------------------------------------
#
# Written by Andrew J Freyer
# GNU General Public License
# http://github.com/andrewjfreyer/monitor
#
# SETUP NECESSARY FILES 
#
# ----------------------------------------------------------------------------------------

#----------------------------------------------------------------------------------------
# CHECK DEPENDENCES
# ----------------------------------------------------------------------------------------

#FIND DEPENDENCY PATHS, ELSE MANUALLY SET
service_path="/etc/systemd/system/monitor.service"
mosquitto_pub_path=$(which mosquitto_pub)
mosquitto_sub_path=$(which mosquitto_sub)
hcidump_path=$(which hcidump)
btmon_path=$(which btmon)
bc_path=$(which bc)
git_path=$(which git)

#error CHECKING FOR MOSQUITTO PUBLICATION 
should_exit=false
[ -z "$mosquitto_pub_path" ] && echo "error: required package 'mosquitto_pub' not found. please install 'mosquitto' and 'mosquitto-clients'." && should_exit=true
[ -z "$mosquitto_sub_path" ] && echo "error: required package 'mosquitto_sub' not found. please install 'mosquitto' and 'mosquitto-clients'." && should_exit=true
[ -z "$btmon_path" ] && echo "error: required package 'btmon' not found. please install 'btmon'." && should_exit=true
[ -z "$hcidump_path" ] && echo "error: required package 'hcidump' not found. please install 'bluez-hcidump' (e.g., sudo apt-get install bluez-hcidump)." && should_exit=true
[ -z "$bc_path" ] && echo "error: required package 'bc' not found. please install 'bc' (e.g., apt-get install bc)" && should_exit=true
[ -z "$git_path" ] && echo "warning: Recommended package 'git' not found. please consider installing for regular updates."
[ ! -f /.dockerenv  ] && [ ! -z "$(which systemctl)" ] && [ ! -e "$service_path" ] && echo "warning: monitor.service not installed. Install service? (y/n)" && read should_install

#BASE DIRECTORY REGARDLESS OF INSTALLATION; ELSE MANUALLY SET HERE
base_directory=$(dirname "$(readlink -f "$0")")
[ ! -z "$PREF_CONFIG_DIR" ] && echo "using $PREF_CONFIG_DIR as config dir" && base_directory="$PREF_CONFIG_DIR"

#SET THE NAME CACHE IF IT DOESN'T EXIST
[ ! -f "$base_directory/.public_name_cache" ] && echo "" > "$base_directory/.public_name_cache"
[ ! -f "$base_directory/address_blacklist" ] && echo "#LIST MAC ADDRESSES TO IGNORE, ONE PER LINE:
" > "$base_directory/address_blacklist"

#BLACKLISTED ADDRESSES
ADDRESS_BLACKLIST="$base_directory/address_blacklist"

#----------------------------------------------------------------------------------------
# CHECK MQTT CONFIGURATION FILES
# ----------------------------------------------------------------------------------------

#MQTT PREFERENCES
MQTT_CONFIG="$base_directory/mqtt_preferences"

if [ -f $MQTT_CONFIG ] ; then 
	source $MQTT_CONFIG

	#errorS
	[ "$mqtt_address" == "0.0.0.0" ] && echo "error: please customize mqtt broker address in: mqtt_preferences" && should_exit=true
	[ "$mqtt_user" == "username" ] && echo "warning: for security purposes, please consider changing 'username' in: mqtt_preferences"
	[ "$mqtt_password" == "password" ]&& echo "warning: for security purposes, please consider changing 'password' in: mqtt_preferences"
	[ "$mqtt_version" == "" ]&& echo "> preference: using default mqtt protocol version" || echo "> preference: using mqtt protocol version $mqtt_version"
	[ ! -f "$mqtt_certificate_path" ] && [ ! -z "$mqtt_certificate_path" ] && echo "error: please check mqtt certificate path in mqtt_preferences" && should_exit=true

	#warningS
	[ -z "$mqtt_port" ] && echo "warning: variable mqtt_port does not appear in mqtt_preferences. using default port 1883". && mqtt_port="1883"
	[ -z "$mqtt_publisher_identity" ] && echo "warning: variable mqtt_publisher_identity does not appear in: mqtt_preferences. using hostname: $(hostname)". && mqtt_publisher_identity="$(hostname)"

	#DEFINE CA APPEND
	if [ -f "$mqtt_certificate_path" ]; then 
		#DEFINE APPEND TO USE FOR MQTT
		mqtt_ca_file_append="--cafile $mqtt_certificate_path"
	fi

	#DEFINE CA APPEND
	if [ ! -z "$mqtt_version" ]; then 
		#DEFINE APPEND TO USE FOR MQTT
		mqtt_version_append="-V $mqtt_version"
	fi
else
	echo "> mosquitto preferences file created. please customize." 

echo "# ---------------------------
#								
# MOSQUITTO PREFERENCES
#								
# ---------------------------

# IP ADDRESS OR HOSTNAME OF MQTT BROKER
mqtt_address=0.0.0.0

# MQTT BROKER USERNAME (OR BLANK FOR NONE)
mqtt_user=username

# MQTT BROKER PASSWORD (OR BLANK FOR NONE)
mqtt_password=password

# MQTT PUBLISH TOPIC ROOT 
mqtt_topicpath=monitor

# PUBLISHER IDENTITY 
mqtt_publisher_identity=''

# MQTT PORT 
mqtt_port='1883'

# MQTT CERTIFICATE FILE (LEAVE BLANK IF NONE)
mqtt_certificate_path=''

#MQTT VERSION (LEAVE BLANK FOR DEFAULT; EXAMPLE: 'mqttv311')
mqtt_version=''

" > "$MQTT_CONFIG"

	#SET SHOULD EXIT
	should_exit=true
fi 

#----------------------------------------------------------------------------------------
# CHECK STATIC DEVICE CONFIGURATION FILES
# ----------------------------------------------------------------------------------------

#STATIC DEVICES PREFERENCES
PUB_CONFIG="$base_directory/known_static_addresses"

if [ -f "$PUB_CONFIG" ]; then 
	#DOUBLECHECKS 
	[ ! -z "$(cat "$PUB_CONFIG" | grep "^00:00:00:00:00:00")" ] && echo " - error: please customize public mac addresses in: known_static_addresses" && should_exit=true
else
	echo "> public MAC address list file created. please customize."
	#IF NO PUBLIC ADDRESS FILE; LOAD 
	echo "
# ---------------------------
#
# PUBLIC MAC ADDRESS LIST
#
# ---------------------------

00:00:00:00:00:00 Nickname #comment" > "$PUB_CONFIG"

	#SET SHOULD EXIT
	should_exit=true
fi 


#----------------------------------------------------------------------------------------
# CHECK BEACON DEVICE CONFIGURATION FILES
# ----------------------------------------------------------------------------------------

#STATIC DEVICES PREFERENCES
BEAC_CONFIG="$base_directory/known_beacon_addresses"

if [ -f "$BEAC_CONFIG" ]; then 
	#DOUBLECHECKS 
	[ ! -z "$(cat "$BEAC_CONFIG" | grep "^00:00:00:00:00:00")" ] && echo " - error: please customize beacon mac addresses in: known_beacon_addresses" && should_exit=true
else
	echo "> beacon MAC address list file created. please customize."
	#IF NO PUBLIC ADDRESS FILE; LOAD 
	echo "# ---------------------------
#
# BEACON MAC ADDRESS LIST; REQUIRES NAME
#
# 	Format: 00:00:00:00:00:00 Nickname #comments
# ---------------------------" > "$BEAC_CONFIG"
fi 

#----------------------------------------------------------------------------------------
# CHECK MONITOR.SERVICE (IF APPLICABLE)
#
#	CREDITS & CONTRIBUTIONS: x99percent 
# ----------------------------------------------------------------------------------------

#FILTER THE ARGV FROM THE PARENT SCRIPT TO REMOVE ONE-TIME USE VARIABLES
FILTERED_ARGS=$(echo "$RUNTIME_ARGS" | sed 's/ \?-d//g;s/ \?-u//g;s/  */ /g')

#CHECK FOR CORRECT SERVICE; 
if [ "$should_install" == "y" ] || [ "$PREF_UPDATE_SERVICE" == true ] ; then
	#REMOVE ALL INSTANCES
	rm "$service_path" 2>&1 >/dev/null

	#CHECK FOR SYSTEMCTL FILE
	base_directory=$(dirname "$(readlink -f "$0")")

echo "[Unit]
Description=Monitor Service
After=network.target

[Service]
User=root
ExecStart=/bin/bash $base_directory/$(basename $0) $FILTERED_ARGS &
WorkingDirectory=$base_directory
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target network.target" > "$service_path"

	#PRINT RESULTS
	[ "$PREF_UPDATE_SERVICE" == true ]  && echo "> monitor.service updated with arguments: $FILTERED_ARGS" 

	sleep 3

	#RELOAD DAEMON AND ENABLE SERVICE
	systemctl daemon-reload
	systemctl enable monitor.service
fi 

#----------------------------------------------------------------------------------------
# BEFORE WE ECHO PREFERENCES, EXIT IF WE NEED TO 
# ----------------------------------------------------------------------------------------

#ARE REQUIREMENTS MET? 
[ "$should_exit" == true ] && exit 1

#----------------------------------------------------------------------------------------
# CHECK BEHAVIOR CONFIGURATION FILES
#----------------------------------------------------------------------------------------

#MQTT PREFERENCES
PREF_CONFIG="$base_directory/behavior_preferences"
[ "$PREF_RESTORE_DEFAULTS" == true ] && rm "$PREF_CONFIG"


if [ -f "$PREF_CONFIG" ]; then 
	source "$PREF_CONFIG"

	preferences=$(echo "> preference: delay between scans = $PREF_INTERSCAN_DELAY
> preference: arrival filter (regex) = $PREF_ARRIVE_TRIGGER_FILTER
> preference: max arrival scan attempts = $PREF_ARRIVAL_SCAN_ATTEMPTS
> preference: max depart scan attempts = $PREF_DEPART_SCAN_ATTEMPTS
> preference: random advertisement expiration = $PREF_RANDOM_DEVICE_EXPIRATION_INTERVAL
> preference: rssi threshold for triggering arrival = $PREF_RSSI_IGNORE_BELOW
> preference: interval until beacon is considered expired = $PREF_BEACON_EXPIRATION
> preference: trigger a departure scan at other nodes when below [x] confidence = $PREF_COOPERATIVE_SCAN_THRESHOLD
> preference: preferred HCI device = $PREF_HCI_DEVICE
> preference: minimum time between the same type of scan = $PREF_MINIMUM_TIME_BETWEEN_SCANS
> preference: mqtt scan start/end reporting = $PREF_MQTT_REPORT_SCAN_MESSAGES
> mqtt trigger: $mqtt_topicpath/scan/ARRIVE
> mqtt trigger: $mqtt_topicpath/scan/DEPART" | sed 's/= $/= error\!/g')
	echo "$preferences"

	#DEFAULTS
	[ -z "$PREF_INTERSCAN_DELAY" ] && PREF_INTERSCAN_DELAY=3
	[ -z "$PREF_ARRIVAL_SCAN_ATTEMPTS" ] && PREF_ARRIVAL_SCAN_ATTEMPTS=2
	[ -z "$PREF_DEPART_SCAN_ATTEMPTS" ] && PREF_DEPART_SCAN_ATTEMPTS=4
	[ -z "$PREF_RANDOM_DEVICE_EXPIRATION_INTERVAL" ] && PREF_RANDOM_DEVICE_EXPIRATION_INTERVAL=45
	[ -z "$PREF_RSSI_CHANGE_THRESHOLD" ] && PREF_RSSI_CHANGE_THRESHOLD=20
	[ -z "$PREF_RSSI_IGNORE_BELOW" ] && PREF_RSSI_IGNORE_BELOW=-75
	[ -z "$PREF_ENVIRONMENTAL_REPORT_INTERVAL" ] && PREF_ENVIRONMENTAL_REPORT_INTERVAL=300
	[ -z "$PREF_BEACON_EXPIRATION" ] && PREF_BEACON_EXPIRATION=145
	[ -z "$PREF_HCI_DEVICE" ] && PREF_HCI_DEVICE='hci0'
	[ -z "$PREF_COOPERATIVE_SCAN_THRESHOLD" ] && PREF_COOPERATIVE_SCAN_THRESHOLD=25
	[ -z "$PREF_MINIMUM_TIME_BETWEEN_SCANS" ] && PREF_MINIMUM_TIME_BETWEEN_SCANS=15
	[ -z "$PREF_MQTT_REPORT_SCAN_MESSAGES" ]  && PREF_MQTT_REPORT_SCAN_MESSAGES=false
	[ -z "$PREF_ARRIVE_TRIGGER_FILTER" ]  && PREF_ARRIVE_TRIGGER_FILTER="0x1a|Apple"
	
	#IF PREFERENCES ARE NOT PROPERLY SET, EXIT
	[ "$(echo "$preferences" | grep -c "error")" -gt "0" ] && echo "> warning: preferences error, using defaults. consider reset to defaults with '-d' flag"

else
	echo "> default behavior preferences file created. please customize to your needs." 

	echo "# ---------------------------
#								
# BEHAVIOR PREFERENCES
#								
# ---------------------------

#DELAY BETWEEN SCANS OF DEVICES
PREF_INTERSCAN_DELAY=3

#MAX RETRY ATTEMPTS FOR ARRIVAL
PREF_ARRIVAL_SCAN_ATTEMPTS=1

#MAX RETRY ATTEMPTS FOR DEPART
PREF_DEPART_SCAN_ATTEMPTS=2

#DETERMINE NOW OFTEN TO REFRESH DATABASES TO REMOVE EXPIRED DEVICES
PREF_DATABASE_REFRESH_INTERVAL=45

#PERIOD AFTER WHICH A RANDOM BTLE ADVERTISEMENT IS CONSIDERED EXPIRED AND A DEPART SCAN IS TRIGGERED
PREF_RANDOM_DEVICE_EXPIRATION_INTERVAL=180

#SECONDS UNTIL A BEACON IS CONSIDERED EXPIRED
PREF_BEACON_EXPIRATION=180

#PREFERRED HCI DEVICE
PREF_HCI_DEVICE='hci0'

#COOPERATIVE DEPARTURE SCAN TRIGGER THRESHOLD
PREF_COOPERATIVE_SCAN_THRESHOLD=65

#MINIMUM TIME BEWTEEN THE SAME TYPE OF SCAN (ARRIVE SCAN, DEPART SCAN)
PREF_MINIMUM_TIME_BETWEEN_SCANS=15

#SHOULD REPORT START/END OF KNOWN DEVICE SCANS
PREF_MQTT_REPORT_SCAN_MESSAGES=false

#IGNORE ANY ADVERTISEMENTS BELOW THIS VALUE (NOTE: Negative value in dBm)
PREF_RSSI_IGNORE_BELOW=-90

#ARRIVE TRIGGER FILTER
PREF_ARRIVE_TRIGGER_FILTER=\"0x1a|Apple\"

" > "$PREF_CONFIG"

	#LOAD DEFAULT PREFERENCES
	should_exit=true
fi 


#ARE REQUIREMENTS MET? 
[ "$should_exit" == true ] && exit 1

