#!/bin/bash

# ----------------------------------------------------------------------------------------
# GENERAL INFORMATION
# ----------------------------------------------------------------------------------------
#
# Written by Andrew J Freyer
# GNU General Public License
# http://github.com/andrewjfreyer/monitor
#
# MQTT SCANNING
#
# ----------------------------------------------------------------------------------------

# ----------------------------------------------------------------------------------------
# UTILITY FUNCTION FOR JOINING STRINGS
# ----------------------------------------------------------------------------------------

#UTILITY FUNCTIONS
function join_string () (IFS=$1; shift; printf "$*");
function json_keypair () (join_string ":" "\"$1\"" "\"$2\"")

#UNFORMAT A JASON STRING 
function json_unformat (){
	#https://stackoverflow.com/a/38607019/225270
	printf "$1" | grep -Eo '"[^"]*" *(: *([0-9]*|"[^"]*")[^{}\["]*|,)?|[^"\]\[\}\{]*|\{|\},?|\[|\],?|[0-9 ]*,?' | awk '{if ($0 ~ /^[}\]]/ ) offset-=4; printf "%*c%s\n", offset, " ", $0; if ($0 ~ /^[{\[]/) offset+=4}'
}

#FORMAT OF 'KEY=OBJECT' IN ARGV VALUES
function json_format (){
	local concat
	local key
	local object
	for var in "$@"
	do
	    object="${var##*=}"
		key="${var%%=*}"
		concat="$concat,$(json_keypair "$key" "$object")"
	done
	printf "{%s}\n" "${concat/,/}"
}

# ----------------------------------------------------------------------------------------
# MQTT ANNOUNCE ONLINE
# ----------------------------------------------------------------------------------------
mqtt_announce_online(){
	#ANNOUCEE HEALTH 
	$mosquitto_pub_path \
	-I "$mqtt_publisher_identity" \
	$mqtt_version_append \
	$mqtt_ca_file_append \
	-P "$mqtt_password" -u "$mqtt_user" \
	-h "$mqtt_address" \
	-p "$mqtt_port" \
	-t "$mqtt_topicpath/$mqtt_publisher_identity/status" \
	-m "online" 2>&1 
}


# ----------------------------------------------------------------------------------------
# CLEAR RETAINED 
# ----------------------------------------------------------------------------------------
mqtt_broker_clean (){
	#DEFINE LOCALS
	local topic_data
	local topic_path

	#MQTT LOOP
	while read instruction; do 

		#ERROR HANDLING
		[[ ${instruction^^} =~ .*REFUSED.* ]] && return 0
		
		#EXTRACT THE TOPIC PATH WITHOUT RELYING ON FORMAT FLAG
		topic_data=$(echo "$instruction" | sed 's/'"$mqtt_topicpath"'\/'"$mqtt_publisher_identity"'\/[0-9_:a-z-]\{2,\}//gi')
		topic_path=$(echo "$instruction" | sed 's/'"$topic_data"'$//g')

		[ -z "$topic_path" ] && continue

		#PUBLISH CLEARING MESSAGE
		$mosquitto_pub_path \
		$mqtt_version_append \
		$mqtt_ca_file_append \
		-P "$mqtt_password" -u "$mqtt_user" \
		-r \
		-n \
		-h "$mqtt_address" \
		-p "$mqtt_port" \
		-t "$topic_path" 2>&1 

	done < <($(which mosquitto_sub) \
		-I "$mqtt_publisher_identity" \
		-v $mqtt_version_append \
		$mqtt_ca_file_append \
		-W 1 \
		-h "$mqtt_address" \
		-p "$mqtt_port" \
		-P "$mqtt_password" \
		-u "$mqtt_user" \
		-t "$mqtt_topicpath/$mqtt_publisher_identity/#" 2>&1 ) 
}

# ----------------------------------------------------------------------------------------
# MQTT LISTENER
# ----------------------------------------------------------------------------------------
mqtt_listener (){
	#ANNOUNCE ONLINE PRESENCE
	mqtt_announce_online
	local topic_data
	local topic_path

	while true; do 
		#MQTT LOOP
		while read instruction; do 

			#ERROR HANDLING
			[[ ${instruction^^} =~ .*REFUSED.* ]] && break


			#EXTRACT THE TOPIC PATH WITHOUT RELYING ON FORMAT FLAG
			topic_data=$(echo "$instruction" | sed 's/'"$mqtt_topicpath"'\/scan\/[0-9_:a-z/-]\{2,\} \?//gi')
			topic_path=$(echo "$instruction" | sed 's/ '"$topic_data"'$//g')

			#PRINT THE INSTRUCTION BACK TO THE MAIN THREAD
			printf "MQTT$topic_path|$topic_data\n" > main_pipe 

		done < <($(which mosquitto_sub) -I \
			"$mqtt_publisher_identity" \
			$mqtt_version_append \
			$mqtt_ca_file_append \
			-h "$mqtt_address" \
			-p "$mqtt_port" \
			-v \
			-P "$mqtt_password" -u "$mqtt_user" \
			-t "$mqtt_topicpath/scan/#" \
			--will-topic "$mqtt_topicpath/$mqtt_publisher_identity/status" \
			--will-payload "offline" 2>&1 ) 

		#LOG ERROR
		log "[CMD-ERRO]	${RED}mqtt broker went offline, or a password/username combination was rejected.${NC} attempting subscribe in 10 seconds..."
		
		sleep 10
	done 
}


# ----------------------------------------------------------------------------------------
# PUBLISH RSSI MESSAGE
# ----------------------------------------------------------------------------------------

publish_rssi_message () {
	if [ -n "$1" ]; then 
		#TIMESTAMP
		local stamp
		local address
		local message
		local mqtt_topic_branch

		#SET ISOLATED ADDRESS
	    address="$1"
		message="$2"

		mqtt_topic_branch="$address"

	    #ALIASES? 
   		[ "${mqtt_aliases[$address]+abc}" ] && mqtt_topic_branch=${mqtt_aliases[$address]:-$address}
		
		local topic="$mqtt_topicpath/$mqtt_publisher_identity/$mqtt_topic_branch/rssi"

		#POST TO MQTT
		($mosquitto_pub_path \
		-I "$mqtt_publisher_identity" \
		$mqtt_version_append \
		$mqtt_ca_file_append \
		-P "$mqtt_password" -u "$mqtt_user" \
		-h "$mqtt_address" \
		-p "$mqtt_port" \
		-t "$topic" \
		-m "$message" 2>&1)
	fi
}

# ----------------------------------------------------------------------------------------
# PUBLISH MESSAGE
# ----------------------------------------------------------------------------------------

publish_presence_message () {
	if [ -n "$1" ]; then 
		#TIMESTAMP
		local stamp
		local should_retain
		local isolated_address
		local retain_flag
		local message
		local existing_alias
		local mqtt_topic_branch
		local device_tracker_message

		#SET ISOLATED ADDRESS
	    isolated_address="${1##*=}"
		mqtt_topic_branch="$isolated_address"

	    #ALIASES? 
    	[ "${mqtt_aliases[$isolated_address]+abc}" ] && mqtt_topic_branch=${mqtt_aliases[$isolated_address]:-$isolated_address}

		#SET TIMESTAMP
		stamp=$(date "+%a %b %d %Y %H:%M:%S GMT%z (%Z)")
		
		#CLEAR PREVIOUS RETAINED MESSAGE
		retain_flag="false"
		if [ "$PREF_SHOULD_RETAIN" == true ]; then 
			should_retain="-r "
			retain_flag="true"
		fi 

		#ASSEMBLE 
		message=$(\
			json_format "$@"\
		 	"retained=$retain_flag"\
		  	"timestamp=$stamp"\
		  	"version=$version"\
		)

		#DEFINE THE TOPIC
		local topic="$mqtt_topicpath/$mqtt_publisher_identity/$mqtt_topic_branch"
		[ "$PREF_MQTT_SINGLE_TOPIC_MODE" == true ] && topic="$mqtt_topicpath/$mqtt_publisher_identity"

		#SHOULD FORMAT AS LETTERS/NUMBERS
		[ "$PREF_FORMAT_MQTT" == true ] && topic=$(echo "$topic" | sed 's/[^A-Z0-9a-z/]//g') 

		#ANNOUNCE ONLINE
		mqtt_announce_online

		#SHOULD WE BE REPORTING AS A DEVICE TRACKER? 
		if [ "$PREF_DEVICE_TRACKER_REPORT" == true ]; then 

			if [[ $message =~ \"confidence\":\"100\" ]]; then 
				#OVERRIDE MESSAGE
				device_tracker_message="home"
			elif [[ $message =~ \"confidence\":\"0\" ]]; then 
				#OVERRIDE MESSAGE
 				device_tracker_message="not_home"
 			else 
 				#NO MQTT MESSAGES IF NOT ZERO OR 100
 				device_tracker_message=""
 			fi


 			#ONLY POST A MESSAGE TO DEVICE TRACKER BOARD IF WE HAVE 
 			#A COMPLETE CONFIDENCE MESSAGE
 			if [ -n "$device_tracker_message" ]; then 
	 			#PRINT FOR DEVICE TRACKER
	 			printf "%s\n" "${PURPLE}$topic/device_tracker $device_tracker_message${NC}"

	 			#POST TO MQTT
				($mosquitto_pub_path \
				-I "$mqtt_publisher_identity" \
				$should_retain \
				$mqtt_version_append \
				$mqtt_ca_file_append \
				-P "$mqtt_password" -u "$mqtt_user" \
				-h "$mqtt_address" \
				-p "$mqtt_port" \
				-t "$topic/device_tracker" \
				-m "$device_tracker_message" 2>&1)
			fi
 		fi 

		#DEBUGGING WITH SIMPLE
		printf "%s\n" "${PURPLE}$topic${NC}"
		printf "%s\n" "${PURPLE}$(json_unformat "$message")${NC}" 

		#POST TO MQTT
		($mosquitto_pub_path \
		-P "$mqtt_password" -u "$mqtt_user" \
		-I "$mqtt_publisher_identity" \
		$should_retain \
		$mqtt_version_append \
		$mqtt_ca_file_append \
		-h "$mqtt_address" \
		-p "$mqtt_port" \
		-t "$topic" \
		-m "$message" 2>&1)  	
	fi
}

publish_cooperative_scan_message () {

	#ANNOUNCE ONLINE
	mqtt_announce_online

	if [ -n "$1" ] && [ -z "$2" ]; then 
		#POST TO MQTT
		($mosquitto_pub_path \
		-I "$mqtt_publisher_identity" \
		$mqtt_version_append \
		$mqtt_ca_file_append \
		-P "$mqtt_password" -u "$mqtt_user" \
		-h "$mqtt_address" \
		-p "$mqtt_port" \
		-t "$mqtt_topicpath/scan/$1" \
		-m "{\"identity\":\"$mqtt_publisher_identity\"}"  2>&1)

	elif [ -n "$1" ] && [ -n "$2" ]; then 
		#POST TO MQTT
		($mosquitto_pub_path \
		-I "$mqtt_publisher_identity" \
		$mqtt_version_append \
		$mqtt_ca_file_append \
		-P "$mqtt_password" -u "$mqtt_user" \
		-h "$mqtt_address" \
		-p "$mqtt_port" \
		-t "$mqtt_topicpath/$2/$1" \
		-m "{\"identity\":\"$mqtt_publisher_identity\"}"  2>&1)

	else 
		
		($mosquitto_pub_path \
		-I "$mqtt_publisher_identity" \
		$mqtt_version_append \
		$mqtt_ca_file_append \
		-P "$mqtt_password" -u "$mqtt_user" \
		-h "$mqtt_address" \
		-p "$mqtt_port" \
		-t "$mqtt_topicpath/scan" \
		-m "{\"identity\":\"$mqtt_publisher_identity\"}" 2>&1)
	fi 
}

#SHOULD CLEAN? 
[ "$PREF_CLEAN_MQTT" == true ]  && mqtt_broker_clean
